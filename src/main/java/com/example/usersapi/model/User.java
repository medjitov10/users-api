package com.example.usersapi.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.util.ArrayList;
import java.util.List;

/**
 * User entity to represent users in our data model. A user has an email, password, username, and {@link Role}. A user may also have a {@link Profile}.
 * We'll be able to search for a user by id, email or username in {@link com.example.usersapi.repository.UserRepository}
 *
 * @author David
 * @author Osman
 *
 * create table in postgres named users
 */
@Entity
@Table(name = "users")
public class User {
    /**
     * @param id - autogenerated value by hibernate
     */

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    /**
     * @param email - make it unique and un-nullable
     */
    @NotBlank(message = "Email cannot be blank")
    @Column(name = "email", unique = true, nullable = false)
    private String email;

    /**
     * @param password make password read only and un-nullable
     */
    @NotBlank(message = "Password cannot be blank")
    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    @Column(name = "password", nullable = false)
    private String password;

    /**
     * @param username - unique and un-nullable
     */
    @NotBlank(message = "Username cannot be blank")
    @Column(name = "username", unique = true, nullable = false)
    private String username;


    /**
     * @param profile map a one to one relationship between user and profile
     */
    @OneToOne(cascade = CascadeType.ALL, mappedBy = "user")
    private Profile profile;

    /**
     * @param roles map a many to many relationship between user and roles
     * create join table user_role
     */
    @ManyToMany
    @JoinTable(
        name="user_role",
            joinColumns = @JoinColumn(name ="role_id"),
            inverseJoinColumns = @JoinColumn(name="user_id"))
    List<Role> roles;

    /**
     * getters and setters
     */

    public List<Role> addRole(Role role) {
        if(roles == null)
            roles = new ArrayList<>();
        roles.add(role);
        return roles;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Profile getProfile() {
        return profile;
    }

    public void setProfile(Profile profile) {
        this.profile = profile;
    }

    public List<Role> getRoles() {
        return roles;
    }

    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }

    public User() {}

}
